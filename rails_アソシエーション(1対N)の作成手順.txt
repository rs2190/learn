【手順】

【アソシエーションについて】
アソシエーションは、「なぜ使用するのか」を知っていないと、理解するのが難しい機能となっています。
また、前提として「データベースで複数のテーブルを連携させる必要がある」ということについて、理解しておく必要があります。

■１．1:N の関係性をモデルに実装する。（1側のモデル。）

　app/models/user.rb ファイルを開いて以下のように実装。

例.)
class User < ApplicationRecord

  has_many :post_images, dependent: :destroy

end

【補足】
has_many とは
新しく"has_many"というメソッドがでてきました。
"has_many"とは、直訳すると「たくさん持っている」という意味になります。
プログラミングではありませんが、例えば英語だと以下のような意味になります。

	has many apples : たくさんりんごを持っている
	has many computers : コンピューターをたくさん持っている]

これを踏まえて、"has_many :post_images"という記述を見てみましょう。
post_images 以外を日本語に直訳すると、「たくさん post_image を持っている」ということになります。

ここでお伝えしたいことは、1:N の「1」側にあたるモデルに、has_many を記載する必要がある ということです。
1：N の関係とは「1 人のユーザーが、N 個投稿することができる」という状況を示していました。
言い換えると、「1 人のユーザーが、たくさん投稿することができる」ということになります。
つまり、1 人のユーザーが何をたくさん持っているか？というのを定義するのが、この場合の"has_many"なのです。

「has_many :post_images」の後ろの「dependent: :destroy」の記述の意味も確認しましょう。
この記述があると「1:Nの1側が削除されたとき、N側を全て削除する」という機能が追加されます。
今回であれば「Userが削除された時に、そのUserが投稿したPostImageが全て削除される」という処理になります。
この記述がないと「Userが削除されたときに、誰が投稿したか分からないPostImageが残る」という状態になってしまい、エラーになります。
今回はUserを削除する機能は実装しないため、この記述を付けなくても実際の動作は変わりませんが、
ほとんどの場合「has_many」には「dependent: :destroy」を付けて実装するのでセットで覚えておきましょう。

■２．1:N の関係性をモデルに実装する。（N側のモデル。(複数のデータを持つモデル。)）

　app/models/user.rb ファイルを開いて以下のように実装。

例.)
class PostImage < ApplicationRecord

  belongs_to :user

end

【補足】
belongs_to とは

	今回も新たに、"belongs_to"というメソッドが出てきました。
	"belongs to?"とは、直訳すると「?に属する」という意味です。

has_many の時と同様、"belongs_to :user"という記述を見ていきましょう。
直訳すると、「ユーザーに属する」ということになります。

has_many とは逆に、1:N の「N」側にあたるモデルに、belongs_to を記載する必要があります。

belongs_to は、PostImage モデルから user_id に関連付けられていて、User モデルを参照することができます。
PostImage モデルに関連付けられるのは、1 つの User モデルです。
このため、単数形の「user」になっている点に注意しましょう。

